{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","type","TodoListItem","todo","onRemove","onToggle","id","text","checked","cn","onClick","TodoList","todos","map","key","App","setTodos","nextId","useRef","current","concat","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAYeA,G,MATM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,aAAf,6BACA,yBAAKA,UAAU,WAAWD,M,eC6BvBE,EAhCI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,SAAc,EACNC,mBAAS,IADH,mBACzBC,EADyB,KAClBC,EADkB,KAG1BC,EAAWC,uBAAY,SAAAC,GACzBH,EAASG,EAAEC,OAAOL,SACnB,IAEGM,EAAWH,uBACb,SAAAC,GACIN,EAASE,GACTC,EAAS,IAETG,EAAEG,mBAEN,CAACT,EAAUE,IAIf,OACI,0BAAMJ,UAAU,aAAaU,SAAUA,GACnC,2BACIE,YAAY,qDACZR,MAAOA,EACPE,SAAUA,IAEd,4BAAQO,KAAK,UACT,kBAAC,IAAD,S,gBCLDC,G,MAhBM,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC7BC,EAAqBH,EAArBG,GAAIC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,QAEjB,OACI,yBAAKpB,UAAU,gBACX,yBAAKA,UAAWqB,IAAG,WAAY,CAAED,YAAYE,QAAS,kBAAML,EAASC,KAChEE,EAAU,kBAAC,IAAD,MAAgB,kBAAC,IAAD,MAC3B,yBAAKpB,UAAU,QAAQmB,IAE3B,yBAAKnB,UAAU,SAASsB,QAAS,kBAAMN,EAASE,KAC5C,kBAAC,IAAD,UCLDK,G,MAVE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOR,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACjC,OACI,yBAAKjB,UAAU,YACTwB,EAAMC,KAAI,SAAAV,GAAI,OACZ,kBAAC,EAAD,CAAcA,KAAMA,EAAMW,IAAKX,EAAKG,GAAIF,SAAUA,EAAUC,SAAUA,UCmDvEU,G,MApDH,WAAO,IAAD,EACYxB,mBAAS,CACnC,CACEe,GAAI,EACJC,KAAM,eACNC,SAAS,KALG,mBACRI,EADQ,KACDI,EADC,KASVC,EAASC,iBAAO,GAEhB5B,EAAWK,uBACf,SAAAY,GACE,IAAMJ,EAAO,CACXG,GAAIW,EAAOE,QACXZ,OACAC,SAAQ,GAEVQ,EAASJ,EAAMQ,OAAOjB,IACtBc,EAAOE,SAAW,IAEpB,CAACP,IAGGR,EAAWT,uBACf,SAAAW,GACEU,EAASJ,EAAMS,QAAO,SAAAlB,GAAI,OAAIA,EAAKG,KAAOA,QAE5C,CAACM,IAGGP,EAAWV,uBACf,SAAAW,GACEU,EACEJ,EAAMC,KAAI,SAAAV,GAAI,OACZA,EAAKG,KAAOA,EAAZ,eAAqBH,EAArB,CAA2BK,SAAUL,EAAKK,UAAYL,QAI5D,CAACS,IAIH,OACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYtB,SAAUA,IACtB,kBAAC,EAAD,CAAUsB,MAAOA,EAAOR,SAAUA,EAAUC,SAAUA,OCzCtCiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d422abfc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoTemplate.scss'\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n    return (\r\n        <div className='TodoTemplate'>\r\n            <div className='app-title'>일정 관리</div>\r\n            <div className='content'>{children}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoTemplate;","import React, { useState, useCallback } from 'react'\r\nimport './TodoInsert.scss'\r\nimport {MdAdd} from 'react-icons/md'\r\n\r\nconst TodoInsert = ( {onInsert}) => {\r\n    const [value, setValue] = useState('')\r\n\r\n    const onChange = useCallback(e => {\r\n        setValue(e.target.value);\r\n    }, [])\r\n\r\n    const onSubmit = useCallback(\r\n        e => {\r\n            onInsert(value);\r\n            setValue('');\r\n\r\n            e.preventDefault();\r\n        },\r\n        [onInsert, value],\r\n    )\r\n\r\n\r\n    return (\r\n        <form className='TodoInsert' onSubmit={onSubmit}>\r\n            <input \r\n                placeholder='할 일을 입력하세요' \r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            <button type='submit'>\r\n                <MdAdd />\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoInsert;","import React from 'react'\r\nimport {\r\n    MdCheckBoxOutlineBlank,\r\n    MdCheckBox,\r\n    MdRemoveCircleOutline,\r\n} from 'react-icons/md'\r\nimport cn from 'classnames'\r\nimport './TodoListItem.scss'\r\n\r\nconst TodoListItem = ( {todo, onRemove, onToggle} ) => {\r\n    const {id, text, checked} = todo\r\n\r\n    return (\r\n        <div className='TodoListItem'>\r\n            <div className={cn('checkbox', { checked })} onClick={() => onToggle(id)}>\r\n                {checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank />}\r\n                <div className='text'>{text}</div>\r\n            </div>\r\n            <div className='remove' onClick={() => onRemove(id)}>\r\n                <MdRemoveCircleOutline />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoListItem","import React from 'react'\r\nimport TodoListItem from './TodoListItem'\r\nimport './TodoList.scss'\r\n\r\nconst TodoList = ({ todos, onRemove, onToggle }) => {\r\n    return (\r\n        <div className='TodoList'>\r\n            { todos.map(todo => (\r\n                <TodoListItem todo={todo} key={todo.id} onRemove={onRemove} onToggle={onToggle}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList","import React, {useState, useRef, useCallback} from 'react';\nimport TodoTemplate from './components/TodoTemplate'\nimport TodoInsert from './components/TodoInsert'\nimport TodoList from './components/TodoList'\nimport './App.css'\n\n\nconst App = () => {\n  const [ todos, setTodos ] = useState([\n    {\n      id: 1,\n      text: '플밍',\n      checked: false,\n    },\n  ])\n\n  const nextId = useRef(2)\n\n  const onInsert = useCallback(\n    text => {\n      const todo = {\n        id: nextId.current,\n        text,\n        checked:false,\n      }\n      setTodos(todos.concat(todo));\n      nextId.current += 1;\n    },\n    [todos],\n  )\n\n  const onRemove = useCallback(\n    id => {\n      setTodos(todos.filter(todo => todo.id !== id));\n    },\n    [todos],\n  )\n\n  const onToggle = useCallback(\n    id => {\n      setTodos(\n        todos.map(todo =>\n          todo.id === id ? {...todo, checked: !todo.checked } : todo,\n        ),\n      )\n    },\n    [todos],\n  )\n\n\n  return (\n  <TodoTemplate>\n    <TodoInsert onInsert={onInsert}/>\n    <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>\n  </TodoTemplate>\n  \n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}